#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rubygems'
require 'bundler/setup'
require 'openssl'
require 'open-uri'
require 'net/https'
require 'tempfile'

COMPILER_MEMFS = '/__enclose_io_memfs__'

def determine_cert_path
  path = "#{COMPILER_MEMFS}/local/vendor/cacert.pem.mozilla"

  return "D:#{path}" if Gem.win_platform?
  return path if File.file?(path)

  File.join('vendor', 'cacert.pem.mozilla')
end

def cert_file_path
  cert_tempfile = Tempfile.new
  cert_tempfile.tap { |n| n.puts(File.read(determine_cert_path)) }.close
  cert_file_path = cert_tempfile.path
end


# HACK: extract temp libraries to use with ffi
# Wrapper for FFI.map_library_name method
require 'ffi'
require 'pathname'

# https://github.com/pmq20/ruby-packer/blob/master/lib/compiler/constants.rb#L10
COMPILER_MEMFS_LIB_CACHE = Pathname.new(Dir.mktmpdir)
at_exit { FileUtils.remove_dir(COMPILER_MEMFS_LIB_CACHE.to_path, true) }

module FFI
  # https://stackoverflow.com/questions/29907157/how-to-alias-a-class-method-in-rails-model/29907207
  self.singleton_class.send(:alias_method, :map_library_name_orig, :map_library_name)

  # http://tech.tulentsev.com/2012/02/ruby-how-to-override-class-method-with-a-module/
  def self.map_library_name(lib)
    if lib.start_with? COMPILER_MEMFS
      memfs_extracted_lib = COMPILER_MEMFS_LIB_CACHE + File.basename(lib)
      FileUtils.cp lib, memfs_extracted_lib unless memfs_extracted_lib.exist?
      lib = memfs_extracted_lib.to_path
    end

    map_library_name_orig(lib)
  end
end
# END of HACK

cert_file_path = nil
DEBUG = ENV['DEBUG']

# Check ssl availability, if not use vendor ssl certificate
begin
  Net::HTTP.get(URI('https://www.iso.org/'))
rescue OpenSSL::SSL::SSLError
  puts('Cannot use SSL requests, installing custom certificate') if DEBUG
  Net::HTTP.class_eval do
    alias _use_ssl= use_ssl=

    def use_ssl= boolean
      self.ca_file = cert_file_path
      self.verify_mode = OpenSSL::SSL::VERIFY_PEER
      self._use_ssl = boolean
    end
  end
end

# explicitly load all dependent gems
# ruby packer cannot use gem load path correctly.
require 'isodoc'
require 'metanorma-acme'
require 'metanorma-csand'
require 'metanorma-csd'
require 'metanorma-gb'
require 'metanorma-iec'
require 'metanorma-ietf'
require 'metanorma-itu'
require 'metanorma-m3d'
require 'metanorma-mpfd'
require 'metanorma-nist'
require 'metanorma-ogc'
require 'metanorma-rsd'
require 'metanorma-standoc'
require 'metanorma-unece'
require 'metanorma'
require 'nokogiri'
require 'git'
require 'metanorma-iso'
require 'metanorma/cli'
require 'sassc'
require 'thor'

# start up the CLI
Metanorma::Cli.start(ARGV)